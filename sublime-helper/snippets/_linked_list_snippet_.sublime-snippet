<snippet>
	<content><![CDATA[
struct Node
{
	int data;
	Node *next, *prev;
	
	Node() {
		data = 0;
		next = prev = nullptr;
	}

	Node(int value) {
		data = value;
		next = prev = nullptr;
	}
};

class LinkedList
{
private:
	Node *head;
	Node *tail;
	int len;

public:
	LinkedList() {
		head = tail = nullptr;
		len = 0;
	}

	LinkedList(int n) {
		len = 0;
		head = tail = nullptr;
		while(n--) 
			addHead(0);
	}

	~LinkedList() {
		Node* cur = head;
		
		while(head) {
			cur = head;
			head = head->next;
			delete cur;
		}

		head = tail = nullptr;
	}

	void addTail(int value) {
		if(!head) head = tail = new Node(value);
		else {
			Node* cur = new Node(value);
			cur->prev = tail;
			tail->next = cur;
			tail = cur;
		}
		++len;
	}

	void addHead(int value) {
		if(!head) head = tail = new Node(value);
		else {
			Node* cur = new Node(value);
			cur->next = head;
			head->prev = cur;
			head = cur;
		}
		++len;
	}

	void popHead() {
		if(!head) return;
		Node* cur = head;
		head = head->next;
		head->prev = nullptr;
		delete cur;
		--len;
	}

	void popTail() {
		if(!tail) return;
		Node* cur = tail;
		tail = tail->prev;
		tail->next = nullptr;
		delete cur;
		--len;
	}

	void remove(Node* node) {
		if(node->next)
			node->next->prev = node->prev;
		if(node->prev)
			node->prev->next = node->next;
		delete node;
	}

	void remove(int value) {
		Node* cur = head;
		while(cur) {
			if(cur->data == value) {
				Node* next = cur->next;
				remove(cur);
				cur = next;
				--len;
			} else cur = cur->next;
		}
	}

	void printList(std::ostream& s = std::cout) const {
		for(Node* cur = head; cur; cur = cur->next)
			s << cur->data << ' ';
	}

	int size() {
		return len;
	}
};

std::ostream& operator << (std::ostream& s, const LinkedList& a) {
	a.printList(s);
	return s;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>_linked_list_</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
